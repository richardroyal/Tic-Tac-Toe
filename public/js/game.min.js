/**
 * Game class for tracking current game state and user turns.
 */
var Game={positions:[1,2,3,4,5,6,7,8,9],winning_combinations:[[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]],cross_positions:[2,4,6,8],claimed_positions:{player_a:[],player_b:[]},position_is_claimable:function(i){return-1!=$.inArray(i,this.claimed_positions.player_a)?!1:-1!=$.inArray(i,this.claimed_positions.player_b)?!1:!0},claim_position:function(i,s){this.claimed_positions[i].push(s)},total_claimed_positions:function(){return a_claimed=this.claimed_positions.player_a.length,b_claimed=this.claimed_positions.player_b.length,a_claimed+b_claimed},is_over:function(){return this.total_claimed_positions()>8?!0:this.user_has_won("player_a")||this.user_has_won("player_b")?!0:!1},user_has_won:function(i){for(var s=!1,n=0;this.winning_combinations.length>n;n++){var t=this.winning_combinations[n];0==$(t).not(this.claimed_positions[i]).length&&(s=!0)}return s},ended_in_tie:function(){return 9>this.total_claimed_positions()?!1:this.user_has_won("player_a")||this.user_has_won("player_b")?!1:!0},reset:function(){this.claimed_positions.player_a=[],this.claimed_positions.player_b=[]}};