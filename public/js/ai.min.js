/**
 * AI class for choosing countermoves for Tic Tac Toe Game.
 *
 * Has function for choosing next 'good' move and next 'best' move
 * so that it can be beatable or unbeatable.
 *
 * Uses heuristic methodology to choose next move and is not
 * fully algorithmic. Negamax is partially implemented but 
 * contains a bug so is not used.
 *
 */
var AI={positions:[1,2,3,4,5,6,7,8,9],winning_combinations:[[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]],cross_positions:[2,4,6,8],corner_positions:[1,3,7,9],ai_claimed_positions:[],user_claimed_positions:[],beatable:!1,get_move:function(i){return this.user_claimed_positions=i.player_a,this.ai_claimed_positions=i.player_b,this.beatable?this.next_good_move():this.next_best_move()},available_positions:function(){var i=[];return i=$(this.positions).not(this.ai_claimed_positions).get(),i=$(i).not(this.user_claimed_positions).get()},next_good_move:function(){return-1!==$.inArray(5,this.available_positions())?5:this.available_cross_positions().length>0?this.available_cross_positions()[0]:this.random_available_position()},random_available_position:function(){var i=this.available_positions();return random_position=Math.floor(Math.random()*i.length),i[random_position]},available_cross_positions:function(){var i=[];return i=$(this.cross_positions).not(this.ai_claimed_positions).get(),i=$(i).not(this.user_claimed_positions).get()},available_corner_positions:function(){var i=[];return i=$(this.corner_positions).not(this.ai_claimed_positions).get(),i=$(i).not(this.user_claimed_positions).get()},next_best_move:function(){var i=this.available_positions();return i.length>7?-1!==i.indexOf(5)?5:this.available_corner_positions()[0]:6==i.length&&-1!==this.user_claimed_positions.indexOf(5)&&4!=$(this.corner_positions).not(this.user_claimed_positions).length?this.available_corner_positions()[0]:this.winning_move()!==!1?this.winning_move():this.opponent_winning_move()!==!1?this.opponent_winning_move():0!=this.opponent_forks()?this.opponent_forks()[0]:0!==this.non_blocked_cross_positions().length?this.non_blocked_cross_positions()[0]:0!==this.available_corner_positions().length?this.available_corner_positions()[0]:this.random_available_position()},winning_move:function(){for(var i=!1,s=0;this.winning_combinations.length>s;s++)win=this.winning_combinations[s],1==$(win).not(this.ai_claimed_positions).length&&(m=$(win).not(this.ai_claimed_positions)[0],-1==$.inArray(m,this.user_claimed_positions)&&(i=m));return i},opponent_winning_move:function(){for(var i=!1,s=0;this.winning_combinations.length>s;s++)win=this.winning_combinations[s],1==$(win).not(this.user_claimed_positions).length&&(m=$(win).not(this.user_claimed_positions)[0],-1==$.inArray(m,this.ai_claimed_positions)&&(i=m));return i},non_blocked_cross_positions:function(){var i=this.available_positions(),s=[];return 0==$([2,8]).not(i).length&&(s.push(2),s.push(8)),0==$([4,6]).not(i).length&&(s.push(4),s.push(6)),s},opponent_forks:function(){var i=[];0==$([2,6]).not(this.user_claimed_positions).length?i.push(3):0==$([2,4]).not(this.user_claimed_positions).length?i.push(1):0==$([6,8]).not(this.user_claimed_positions).length?i.push(9):0==$([4,8]).not(this.user_claimed_positions).length&&i.push(7);var s=[];return s=$(i).not(this.ai_claimed_positions).get(),s=$(s).not(this.user_claimed_positions).get(),1>s.length?!1:s},negamax:function(i,s){if(this.is_terminal(i))return this.evaluate_state(i);for(var n=this.child_positions(i),t=0;n.length>t;t++){var o=$.extend({},i);return 1==s?o.ai_claimed_positions.push(n[t]):o.user_claimed_positions.push(n[t]),-1*this.negamax(o,-1*s,0)}},evaluate_state:function(i){return this.user_has_won_state(i.ai_claimed_positions)?1:this.user_has_won_state(i.user_claimed_positions)?-1:0},child_positions:function(i){var s=[],n=[];return n=i.ai_claimed_positions.slice(0).concat(i.user_claimed_positions),s=$(this.positions).not(n).get()},is_terminal:function(i){var s=0;return s+=i.ai_claimed_positions.length,s+=i.user_claimed_positions.length,s>8?!0:this.user_has_won_state(i.ai_claimed_positions)||this.user_has_won_state(i.user_claimed_positions)?!0:!1},user_has_won_state:function(i){for(var s=!1,n=0;this.winning_combinations.length>n;n++){var t=this.winning_combinations[n];0==$(t).not(i).length&&(s=!0)}return s},reset:function(){this.ai_claimed_positions=[],this.user_claimed_positions=[],this.beatable=!1}};